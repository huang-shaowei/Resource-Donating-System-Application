/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.Doctor;

import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.DoctorOrganization;
import Business.Organization.NurseOrganization;
import Business.Organization.Organization;
import Business.Person.Person;
import Business.UserAccount.UserAccount;
import Business.Vitals.Vitals;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author karth
 */
public class DoctorWorkAreaJPanel extends javax.swing.JPanel {
  private JPanel userProcessContainer;
    private DoctorOrganization doctorOrganization;
    private Network network;
    private UserAccount userAccount;
    private WorkRequest patientCase;
    private Enterprise enterprise;
    private Person person;


    /**
     * Creates new form DoctorWorkArea
     */


    public DoctorWorkAreaJPanel(JPanel userProcessContainer, DoctorOrganization doctorOrganization, Network network, UserAccount account, Enterprise enterprise) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.doctorOrganization = doctorOrganization;
        this.network = network;
        this.userAccount = account;
        this.enterprise = enterprise;
        this.person=person;
        populateTable();
    }
    
        private void populateTable() {
            DefaultTableModel dtm = (DefaultTableModel)patientTbl.getModel();
        dtm.setRowCount(0);
        
        for(Organization org:enterprise.getOrganizationDirectory().getOrganizationList())
        {   if(org instanceof NurseOrganization)
            for(Person per : org.getPersonDirectory().getPersonList())
            {
                Object [] row = new Object[4];
                row[0] = per.getFirstName();
                row[1] = per.getLastName();
                row[2] = per.getGender();
                row[3] = per.getAge();
                dtm.addRow(row);
            }
    
        }
            
            
            
            
            
            
           
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        PatientsRecords = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        patientTbl = new javax.swing.JTable();

        setBackground(new java.awt.Color(255, 255, 255));

        PatientsRecords.setFont(new java.awt.Font("Lucida Fax", 2, 12)); // NOI18N
        PatientsRecords.setText("Check Patient Vitals");
        PatientsRecords.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PatientsRecordsActionPerformed(evt);
            }
        });

        patientTbl.setFont(new java.awt.Font("Lucida Fax", 2, 12)); // NOI18N
        patientTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "First Name", "Last Name", "Gender", "Age"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(patientTbl);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 443, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PatientsRecords, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(49, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(PatientsRecords)
                .addContainerGap(62, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void PatientsRecordsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PatientsRecordsActionPerformed
        int row = patientTbl.getSelectedRow();
        if(row<0){
            JOptionPane.showMessageDialog(null, "Pls select a row!!", "Warning", JOptionPane.WARNING_MESSAGE);
        }
        String firstName = patientTbl.getValueAt(row, 0).toString();
        String lastName=patientTbl.getValueAt(row, 1).toString();
        Person p=new Person();
        for(Organization org:enterprise.getOrganizationDirectory().getOrganizationList())
        {   if(org instanceof NurseOrganization)
            for(Person per : org.getPersonDirectory().getPersonList())
            {
               if(per.getFirstName().equals(firstName)&&per.getLastName().equals(lastName))
               {
                   p=per;
               }
            }
    
        }
        
        
        MonitorPatients mp = new MonitorPatients(userProcessContainer,doctorOrganization,enterprise,p);
        userProcessContainer.add("MonitorPatients", mp);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_PatientsRecordsActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton PatientsRecords;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable patientTbl;
    // End of variables declaration//GEN-END:variables


}
